services:
  nginx:
    depends_on:
      - freeradius1
      - freeradius2
    image: nginx:1.25
    ports:
      - "1812:1812/udp"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  freeradius1:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    image: freeradius-entra-id
    build: .
    command: freeradius -X

  freeradius2:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    image: freeradius-entra-id
    command: freeradius -X

  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: freeradius
      POSTGRES_PASSWORD: pass
    # Check that PostgreSQL is up before considering container to be ready.
    # Based on https://github.com/peter-evans/docker-compose-healthcheck
    healthcheck:
      # Explicitly set username and database to avoid errors
      # Based on https://github.com/peter-evans/docker-compose-healthcheck/issues/16#issuecomment-1073039761
      test: ["CMD-SHELL", "pg_isready -U freeradius -d freeradius"]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - ./config/postgresql/create-database.sh:/docker-entrypoint-initdb.d/create-database.sh:ro

  # It's also possible to set up a highly-available cluster of Redis nodes,
  # see https://www.merge.dev/blog/how-to-spin-up-redis-cluster-in-docker
  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    volumes:
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    command: ["redis-server", "/etc/redis/redis.conf"]
